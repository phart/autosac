#!/usr/bin/env python

"""
autosac

Automated Support Acceptability Checklist

Copyright (c) 2015  Nexenta Systems
William Kettler <william.kettler@nexenta.com>
"""

import getopt
import sys
import logging
import logging.config
import simplejson
import time
import lib.prompt as prompt
from lib.execute import execute, Retcode
from lib.prompt import prompt_yn
from lib.checks import *

version = "1.0"
output_d = "/var/tmp/autosac"
output_f = "nexenta_autosac_%s.json" \
               % time.strftime('%Y%m%d.%H%M%S', time.localtime(time.time()))
log = "etc/logging.conf"
config = "etc/autosac.json"
logger = logging.getLogger("autosac")


def usage():
    """
    Print usage.

    Inputs:
        None
    Outputs:
        None
    """
    cmd = sys.argv[0]

    print "%s [-h] [-c CONFIG]" % cmd
    print ""
    print "Nexenta AutoSAC (Support Acceptance Check) utility."
    print "Version %s" % version
    print ""
    print "Arguments:"
    print ""
    print "    -h, --help           print usage"
    print "    -c, --config CONFIG  alternate config file"


def reboot():
    try:
        execute("reboot")
    except Retcode, r:
        logger.error("Reboot failed")
        logger.error(str(r))


def parse_config(f):
    """
    Parse the JSON config file.

    Inputs:
        f (str): Path to JSON
    Outpus:
        version (str): JSON version string
        checks (dict): Check definitions
    """
    # Open the configuration file
    try:
        fh = open(f)
    except Exception, e:
        logger.error("Failed to open the config file")
        logger.error(str(e))
        sys.exit(1)

    # Load the configuration file
    try:
        json = simplejson.load(fh, encoding=None, cls=None)
    except Exception, e:
        logger.error("Failed to parse the config file")
        logger.error(str(e))
        sys.exit(1)
    finally:
        fh.close()

    # TODO validate the outline, for now we expect the user to format properly

    return json


def write_output(f, output):
    """
    Write the output in JSON format to the defined file.

    Inputs:
        f (str): Path to output file
        output (dict): Output dictionary
    Outputs:
        None
    """
    # Open the output file
    try:
        fh = open(f, 'w')
    except Exception, e:
        logger.error("Failed to open the output file")
        logger.error(str(e))
        sys.exit(1)

    # Dump the output dictionary in JSON format to the file
    try:
        simplejson.dump(output, fh, indent=4 * ' ')
    except Exception, e:
        logger.error("Failed to write output to file")
        logger.error(str(e))
        sys.exit(1)
    finally:
        fh.close()


def main():
    # Parse command line arguments
    try:
        opts, args = getopt.getopt(sys.argv[1:], ":hc:", ["help", "config="])
    except getopt.GetoptError, g:
        print str(g)
        usage()
        sys.exit(2)

    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("-c", "--config"):
            global config
            config = a

    # Create output directory
    if not os.path.exists(output_d):
        try:
            os.mkdir(output_d)
        except IOError, i:
            print str(i)
            sys.exit(1)

    # Initialize logging
    logging.config.fileConfig(log)

    # Parse the config file
    checks = parse_config(config)

    # Iinitialize the output dict
    data = {"results": {}}

    # Log the autosac and autosac.json versions
    logger.info("AutoSAC v%s" % version)
    data["autosac_version"] = version

    # Iterate over each check
    for c in checks:
        name = c["name"]
        # If the check is disabled log it and continue
        if not c["enabled"]:
            logger.warn("Check %s is disabled" % name.upper())
            continue

        # If the log is enabled execute the check as defined in the config
        logger.info("Check %s in progress" % name.upper())
        try:
            f = globals()[c["f"]]
            data["results"][name] = f(*c["args"], **c["kwargs"])
        except RuntimeError, r:
            logger.error(str(r))
            data["results"][name] = None
        except Exception, e:
            logger.error("Encountered an unhandled exception")
            logger.error(str(e))
            logger.debug(str(e), exc_info=True)
            data["results"][name] = None
    logger.info("Checks completed")

    # Write the data to the output file
    write_output(os.path.join(output_d, output_f), data)

    logger.info("Output saved to %s." % os.path.join(output_d, output_f))

    # Prompt for reboot
    print ""
    print "To complete the AutoSAC process a system reboot is required."
    if prompt_yn("Reboot now?"):
        logger.warn("Rebooting!")
        reboot()
    else:
        logger.warn("Reboot skipped...exiting!")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.warning("Cancelled by user")
        sys.exit(1)
